import sys
import os
import getpass
from web3 import Web3


sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), 'core')))
import asyncio
from core import W3Client, logger, is_value_valid, wait_until_confirm
from core import (
    ERC20AddressIncorrect,
    ERC20AddressAlreadySet,
    PrivateKeyIncorrect,
    )


def set_client_address(w3_client, message):
    while True:
        try:
            client_address = input(message)
            try:
                w3_client.set_address(client_address)
            except ERC20AddressIncorrect:
                continue
            except ERC20AddressAlreadySet:
                return False
            return True
        except KeyboardInterrupt:
            logger.warning("\n‚ö†Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            sys.exit(130)


def set_client_private_key(w3_client, message):
    while True:
        try:
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å getpass. –ü–æ–ø—Ä–æ–±—É–µ–º —Å–∫—Ä—ã—Ç—å –≤–≤–æ–¥ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –≤ —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                private_key = getpass.getpass(message)
            except getpass.GetPassWarning:
                # –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–π getpass, —Ç–æ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–π input
                logger.info("‚ö†Ô∏è –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–∏ –≤–≤–æ–¥–µ. –¢–∞–∫ –∫–∞–∫ –∫–æ–Ω—Å–æ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–≤–æ–¥.")
                private_key = input(message)

            w3_client.set_private_key(private_key)
        except PrivateKeyIncorrect:
            continue
        except KeyboardInterrupt:
            logger.warning("\n‚ö†Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            sys.exit(130)
        return True


def get_amount_to_send(message):
    while True:
        try:
            amount = input(message)
            if is_value_valid(amount):
                return amount
            else:
                continue
        except KeyboardInterrupt:
            logger.warning("\n‚ö†Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            sys.exit(130)


async def update_balance(w3_client):
    balance_wei = await w3_client.get_balance()
    balance_eth = w3_client.w3.from_wei(balance_wei, 'ether')
    return balance_wei, balance_eth

async def quantity_check(w3_client, transaction):
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø–æ–Ω—è—Ç—å - –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ (—Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞ + gas), –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.
    """
    try:
        check = int((await w3_client.w3.eth.estimate_gas(transaction)) * 1.5)
    except ValueError as e:
        if "insufficient funds" in str(e):
            logger.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞.")
            return False
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏: {str(e)}")
            return False
    return check


async def main():
    base_url = "https://arbitrum.llamarpc.com"
    explorer_url = "https://arbiscan.io"
    proxy = None
    eip_1559 = True


    logger.warning("‚ö†Ô∏è –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª, –≤–º–µ—Å—Ç–æ –∫–æ–Ω—Å–æ–ª–∏ IDE, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –≤–≤–æ–¥ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç.")
    async with W3Client(base_url, explorer_url, proxy, "Sender", eip_1559) as sender, \
               W3Client(base_url, explorer_url, proxy, "Recipient", eip_1559) as recipient:

        set_client_address(sender, "üì¢ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è :")
        set_client_private_key(sender, "üì¢ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–∏ÃÜ –∫–ª—é—á –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (‚ö†Ô∏è –≤–≤–æ–¥ –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç, –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Enter) :")
        set_client_address(recipient, "üì¢ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è :")


        while True:
            sender_balance_wei, sender_balance_eth = await update_balance(sender)
            recipient_balance_wei, recipient_balance_eth = await update_balance(recipient)

            logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {sender_balance_eth:.5f} eth")
            logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {recipient_balance_eth:.5f} eth")

            amount_eth = get_amount_to_send("üì¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Ethereum –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–Ω–µ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è + —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –≥–∞–∑) :")
            amount_wei = sender.w3.to_wei(amount_eth, 'ether')

            transaction = await sender.prepare_tx(recipient.address, amount_eth)

            gas = await quantity_check(sender, transaction)

            if not gas:
                continue
            break

        if eip_1559:
            gas_cost_wei = transaction['maxFeePerGas'] * gas
            gas_cost_eth = sender.w3.from_wei(gas_cost_wei, 'ether')
        else:
            gas_cost_wei = transaction['gasPrice'] * gas
            gas_cost_eth = sender.w3.from_wei(gas_cost_wei, 'ether')

        total_cost_wei = float(amount_wei) + gas_cost_wei

        logger.info(f"‚ÑπÔ∏è –ë—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å {amount_eth} eth —Å –∫–æ—à–µ–ª—å–∫–∞ {sender.address} –Ω–∞ –∫–æ—à–µ–ª–µ–∫ {recipient.address}")
        logger.info(f"‚ÑπÔ∏è {gas_cost_eth:.20f} eth –ø–ª–∞—Ç–∞ –∑–∞ –≥–∞–∑. ‚úÖ –°—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. ‚úÖ –°—Ä–µ–¥—Å—Ç–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è –ø–ª–∞—Ç—ã –∑–∞ –≥–∞–∑.")

        if wait_until_confirm("üì¢ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ä–µ–¥—Å—Ç–≤ (y/n): "):
            tx_hash = await sender.sign_and_send_tx(transaction)
            await sender.wait_tx(tx_hash)

            sender_balance_wei, sender_balance_eth = await update_balance(sender)
            recipient_balance_wei, recipient_balance_eth = await update_balance(recipient)

            logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {sender_balance_eth:.5f} eth")
            logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {recipient_balance_eth:.5f} eth")
            logger.success(f"‚úÖÔ∏è –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {amount_eth} eth —Å –∫–æ—à–µ–ª—å–∫–∞ {sender.address} –Ω–∞ –∫–æ—à–µ–ª–µ–∫ {recipient.address}")
        else:
            logger.warning("Ô∏èüì¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")


if __name__ == '__main__':
    asyncio.run(main())