Проект Арбитражный бот синхронный

00:00 Старт записи, ожидаем остальных участников

• Начало записи, монтажер может убрать лишнее.
• Обсуждение количества просмотров и участников.
• Приветствие участников и ожидание их подключения.

01:08 Вопросы по особенностям авторизации на платформе.

• Зачем авторизация через MetaMask.
• Обсуждение проблем с подключением через Ledger.
• По вопросам смены кошелька и проблем по ботам пишите в саппорт.

04:18 Начало работы над проектом. Логика построения бота

• Как задавать вопросы во время стрима.
• План разбора задачи и логики построения бота.
• Будем анализировать одинаковые пары.
• Для примера ограничимся двумя биржами: Kucoin и Binance.

06:40 Ищем в документации методы API для получения нужных нам данных с бирж.

• Рассматриваем методы для получения данных с Kucoin и Binance.

09:37 Начинаем написание кода. Функций для отправки запросов GET и POST.

• Будем писать код в стиле функционального программирования.
• Создание функций для отправки запросов GET и POST.
• Обработка ошибок и создание заглушек для обработки исключений.

14:05 Напишем функцию запись в JSON для хранения данных бирж.

• Написание функции для записи данных в JSON.
• Использование библиотеки JSON для работы с файлами.
• Подготовка данных для записи в файл.

14:50 Q: "Зачем обрабатывать ошибку через Except?"

20:48 Базовые функции готовы, начинаем прорабатывать логику самой программы.

• Создание переменных API для бирж Binance и Kucoin.
• Копирование и вставка ссылок на API.

23:19 Q: "Почему мы не используем готовые библиотеки под биржи?"

• Рассмотрение использования готовых библиотек для запросов.
• Преимущества и недостатки использования библиотек.
• Решение использовать прямые запросы для повышения скорости.
• Важность обучения и развития навыков работы с запросами.
• Использование готовых решений это нормально, но для обучения полезно обойтись без них.

26:40 Продолжение работы с запросами и логикой программы. Поиск подходящих ссылок API.

28:03 Asker объясняет важность принципа: "От простого к сложному".

28:22 Отправляем запросы. Смотрим первые результаты.

• Создание переменных для хранения данных с бирж.
• Отправка запросов и получение ответов.

31:25 Преобразуем ответы в JSON, чтоб с данными можно было удобно работать.

32:32 Записываем данные в файл. Улучшаем читаемость файла.

• Запись данных в JSON файлы для анализа.
• Использование метода indent для улучшения читаемости JSON.

34:50 Анализируем данные, пытаемся понять что именно нам вернул API.

35:34 Планируем как мы будем работать с этими данными.

• Анализ данных и получение списков и словарей для дальнейшей работы.
• Запуск программы с двумя списками в файлах.

36:30 Пытаемся разобраться в параметрах и переменных API биржи. Смотрим документацию.

• Анализ данных из Binance и Kucoin.
• Определение символов и параметров API для работы.

39:24 Создаём функцию market_data для обработки данных бирж.

• Перебор тикеров и бирж.
• Обработка ошибок и ключей.
• Обсуждение целесообразности чтения из JSON
• Создание структуры словарей для анализа.

48:15 Ищем способ фильтрации тикеров.

• Фильтрация символов для сравнения.
• Использование ключей для определения тикеров.
• Запись символов в словарь.

50:54 Создаём файл для хранения данных спредов.

• Открытие файла для чтения данных.
• Создание переменной для работы с JSON.
• Обработка ошибок при создании файла.

52:03 Обработка ошибок при чтении файла

• Открытие пустого файла на чтение.
• Обработка ошибки при попытке закодировать JSON.
• Импорт библиотеки для обработки ошибок.
• Обработка ошибки при отсутствии файла.
• Создание списка для хранения данных.
• Запись данных в список по ключу "символ".

54:37 Нашли способ определить соответствие тикеров на разных биржах.

• Удаление тире из тикера Kucoin для соответствия тикерам Binance.

55:37 Создание списка словарей spread_data с тикерами и ценами бирж.

58:07 Реализуем функцию для приведения тикеров к одному виду через метод replace.

59:35 Дискуссия и поиск структуры для хранения данных бирж.

• Создание двух словарей для хранения данных или перебор тикеров.
• Передача данных в функцию для объединения.
• Использование метода default для создания ключей в словаре.

01:06:00 Пишем функцию для поиска спреда.

• Открытие файла с данными.
• Распаковка словаря для доступа к ключам и значениям.
• Создание финального словаря для хранения объединенных данных.

01:10:55 Запуск функции и проверка промежуточного итога.

01:11:15 Обнаружение проблемы с логикой.

• Перестройка логики для добавления цен с каждой биржи.

01:14:13 Проблемы с тикерами

• Обнаружение проблем с тикерами на разных биржах.
• Предложение по логике обработки данных.
• Исправление ошибок и проверка результатов.

01:14:45 Предложение найти общие тикеры, чтоб работать только с ними.

• Создание списка тикеров, общих для двух бирж.
• Использование пересечений для получения общих тикеров.

01:20:45 Предложение получить словарь общих тикеров через пересечение словарей.

01:27:00 Отказались от идеи поиска пересечений.

01:27:34 Создаём total_data - словарь с финальными результатами поиска спреда.

• Тестовый print, смотрим результаты.
• Сравнение данных с двух бирж.
• Подготовка данных для дальнейшего анализа.

01:29:05 Логика сравнения цен на биржах и расчета спреда.

• Обсуждение работы с ценами на биржах Binance и Kucoin.
• Создание списка пар с ценами на нескольких биржах.
• Нахождение минимальной и максимальной цены для каждой пары.

01:32:14 Сортировка данных через лямбда-функции.

• Использование лямбда-функции для сортировки данных по ключу.
• Объяснение работы метода sort в Python.
• Сортировка данных по значению, а не по ключу.

01:33:50 Обсуждаем разные способы определения направления арбитража.

• Обсуждение методов определения направления торговли.
• Пример с вычитанием цен для определения знака спреда.
• Уточнение, что если спред отрицательный, то нужно торговать в обратном направлении.

01:36:25 Расчет спреда и направления арбитража.

• Создание функции для расчета спреда.
• Пример расчета спреда для пары Binance и Kucoin.
• Обсуждение необходимости округления и форматирования данных.
• Запуск программы и проверка результатов.
• Исправление ошибок в расчете спреда.
• Уточнение, что спред должен быть в процентах, а не в абсолютных значениях.

01:40:15 Ещё раз о важности принципа от "простого к сложному".

01:41:20 Пришли к решению рассчитывать спред в процентах.

01:42:30 Обсудили форматирование в f-строках для наглядности отображения.

01:44:30 Тестовый запуск. Анализируем результат. Выяснили, что спред рассчитывается неверно.

• Различие между покупкой и продажей на основе разницы цен.
• Проверка на отрицательные значения для определения направления сделки.

01:46:00 Проблемы с расчетами спреда и методы их решения.

• Обсуждение необходимости деления на большее число для определения покупки.
• Различие в расчетах для положительных и отрицательных значений.
• Проверка корректности расчетов и исправление ошибок.

01:49:39 Проверяем цены на биржах для определения корректности расчетов.

• Проблемы с нулевыми значениями цен на некоторых биржах.
• Обработка ошибок и проверка корректности данных.

01:51:30 Корректируем формулу расчета спреда.

01:52:00 Обработка ошибок при делении на ноль.

01:56:10 Использование списочных выражений, их преимущества.

01:56:47 Преимущества списочных выражений

• Списочные выражения позволяют применять выражения к каждому элементу списка.
• Пример использования списочных выражений для сокращения кода и улучшения читаемости.

02:03:00 Использование функции any для проверки наличия хотя бы одного элемента с булевым значением true.

02:04:30 Продумываем логику сортировки результатов.

• Обсуждение сортировки данных по максимальному спреду.
• Возможность настройки логики для удаления мелких спредов.
• Планы по улучшению кода, включая создание ссылок на тикеры и использование софта для открытия тикеров на разных биржах.
• Создание нового списка для сортировки данных.
• Добавление информации о спредах в словарь.
• Запись данных о покупке и продаже на разных биржах и округление спредов до двух знаков после запятой.

02:07:05 Использование метода sorted для сортировки списка с результатами.

02:10:05 Применение лямбда-функции для сортировки по ключу.

02:11:30 Использование аргумента reverse для сортировки от большего к меньшему.

• Удаление лишних элементов из списка.
• Финальный список без лишних элементов.

02:13:11 Работа с тикерами

• Создание переменной для ключа тикера.
• Обращение по ключу для получения данных.
• Финальный принт списка с данными.

02:15:03 Проверка данных о спредах для различных токенов.

• Обнаружение странных спредов и их анализ.
• Проверка корректности данных и тикеров.

02:19:17 Правильнее брать bid и ask из ордербука для расчетов спреда.

02:20:48 Оптимизация кода для уменьшения количества запросов.

• Удаление ненужных функций и переменных.
• Проверка работы улучшенного кода.

02:24:42 Дискуссия. Особенности и сложности арбитража в текущих условиях.

02:28:38 Возможности для заработка ночью)

• Ночью открываются возможности для заработка на биржах.
• Важно иметь продуманный алгоритм и терпение.
• Первые деньги автор заработал на своем софте, используя быструю покупку и продажу.

02:29:36 Опыт и терпение

• Для успеха в арбитраже нужно набраться опыта и терпения.
• Важно найти стабильный круг направлений для заработка.
• Автор курса отвечает на вопросы в чате, но не постоянно.

02:30:00 Выяснили что asker автор курса и сидит в чате)

02:31:10 Обратная связь.

02:32:15 Финальные советы от asker'a.

• Автор курса делится опытом и советами по арбитражу.
• Важно понимать, как работать с алгоритмами и библиотеками.
• Рекомендуется сохранять записи и улучшать код для масштабируемости.

02:33:48 Важность написания проекта арбитража с нуля.

• Автор подчеркивает важность написания проекта арбитража с нуля.

02:34:05 Благодарности и прощание с аудиторией.


