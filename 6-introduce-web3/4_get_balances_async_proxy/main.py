import asyncio
from web3 import AsyncWeb3
from web3.providers.async_rpc import AsyncHTTPProvider


async def check_connection(w3_async_client):
    return await w3_async_client.is_connected()


async def get_proxy():
    proxy = input(
        "üì£ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ username:password@proxyserver:port :"
    )
    return proxy


async def get_address(w3_async_client):
    while True:
        address = input("üì£ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å ERC20 –∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ :")
        is_address_correct = await is_valid_erc20_address(w3_async_client, address)
        if is_address_correct:
            return address
        else:
            print("‚ö†Ô∏è ERC20 –∞–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º.")


async def is_valid_erc20_address(w3_async_client, address):
    if w3_async_client.is_address(address):
        return True
    return False


async def get_balance(w3_async_client, address):
    checksum_address = w3_async_client.to_checksum_address(address)
    balance = await w3_async_client.eth.get_balance(checksum_address)
    eth_balance = w3_async_client.from_wei(balance, "ether")
    return [(checksum_address, eth_balance)]


def print_balances(balances):
    for address, balance in balances:
        print(f"üí≤ –ë–∞–ª–∞–Ω—Å –∞–¥—Ä–µ—Å–∞ {address}: {balance:.4f} üá™üáπüá≠")


async def main():

    proxy = await get_proxy()
    rpc_url = "https://eth.llamarpc.com"
    request_kwargs = {"proxy": f"http://{proxy}"}
    w3_async = AsyncWeb3(AsyncHTTPProvider(rpc_url, request_kwargs=request_kwargs))
    if not await check_connection(w3_async):
        print(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, RPC –∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –ø—Ä–æ–∫—Å–∏."
        )
        return

    address = await get_address(w3_async)

    balances = await get_balance(w3_async, address)
    print_balances(balances)


if __name__ == "__main__":
    asyncio.run(main())
