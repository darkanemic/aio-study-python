import asyncio
from web3 import AsyncWeb3
from web3.providers.async_rpc import AsyncHTTPProvider


async def check_connection(w3_async_client):
    return await w3_async_client.is_connected()


def is_valid_erc20_address(w3_async_client, address):
    if w3_async_client.is_address(address):
        return True
    return False


async def main():

    w3_async = AsyncWeb3(AsyncHTTPProvider("https://1rpc.io/linea"))
    address = input("–í–≤–µ–¥–∏—Ç–µ ERC20 –∞–¥—Ä–µ—Å: ")
    while not is_valid_erc20_address(w3_async, address):
        address = input("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ERC20(0x...) –∞–¥—Ä–µ—Å: ")
    if await check_connection(w3_async):
        checksum_address = w3_async.to_checksum_address(address)
        balance = await w3_async.eth.get_balance(checksum_address)
        eth_balance = w3_async.from_wei(balance, "ether")
        nonce = await w3_async.eth.get_transaction_count(checksum_address)
        print(
            f"üí≤ –ë–∞–ª–∞–Ω—Å –¥–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞: {eth_balance:.4f} üá™üáπüá≠\nüßÆ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {nonce}"
        )
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø—Ä–æ–≤–∞–∏ÃÜ–¥–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")


if __name__ == "__main__":
    asyncio.run(main())
